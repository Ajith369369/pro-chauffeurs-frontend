import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// This defines the initial state of the slice. initialState is an object containing two nested objects: bookingFormState, driverFormState, and hirerFormState.
// driverFormState has a single property, driver_name.
const initialState = {
  bookingFormState: {
    service_type: "",
    pickup_date: "",
    pickup_location: "",
    dropoff_location: "",
  },

  driverFormState: {
    driver_name: "",
  },

  hirerFormState: {
    passenger_name: "",
    email: "",
    mobile_number: "",
    car_make: "",
    car_model: "",
    reg_number: "",
  },
};

// Define the async thunk
export const addCheck = createAsyncThunk(
  "hirerDetails/addCheck",
  async (formData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "http://localhost:3000/allUsersBookingDetails",
        formData
      );
      if (response.status >= 200 && response.status < 300) {
        return response.data; // Return the data to be used in the fulfilled action
      } else {
        throw new Error("Failed to get success response.");
      }
    } catch (error) {
      return rejectWithValue(error.response.data); // Return the error to be used in the rejected action
    }
  }
);

// This creates a Redux slice named "form" with the specified initial state and reducers.
// name: The name of the slice, which is "form".
// initialState: The initial state defined above.
// reducers: An object containing reducer functions that handle state updates.
// updateBookingFormState: Updates bookingFormState with the payload from the action, merging it with the existing state.
// resetBookingFormState: Resets bookingFormState to its initial state.
const hirerDetailsSlice = createSlice({
  name: "form",
  initialState,
  reducers: {
    updateBookingFormState(state, action) {
      state.bookingFormState = { ...state.bookingFormState, ...action.payload };
    },
    updateDriverFormState(state, action) {
      state.driverFormState = { ...state.driverFormState, ...action.payload };
    },
    updateHirerFormState(state, action) {
      state.hirerFormState = { ...state.hirerFormState, ...action.payload };
    },
    resetBookingFormState(state) {
      state.bookingFormState = initialState.bookingFormState;
    },
    resetDriverFormState(state) {
      state.driverFormState = initialState.driverFormState;
    },
    resetHirerFormState(state) {
      state.hirerFormState = initialState.hirerFormState;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(addCheck.pending, (state) => {
        // Handle loading state if needed
        console.log("Loading addCheck...");
      })
      .addCase(addCheck.fulfilled, (state, action) => {
        // Handle success state
        console.log("Successfully added:", action.payload);
      })
      .addCase(addCheck.rejected, (state, action) => {
        // Handle error state
        console.error("Failed to add:", action.payload);
      });
  },
});

// This exports the action creators generated by createSlice.
// The createSlice function automatically generates action creators for each reducer function. Here, the action creators for updateBookingFormState, updateDriverFormState, updateHirerFormState,resetBookingFormState, resetDriverFormState and resetHirerFormState are exported.
export const {
  updateBookingFormState,
  updateDriverFormState,
  updateHirerFormState,
  resetBookingFormState,
  resetDriverFormState,
  resetHirerFormState,
} = hirerDetailsSlice.actions;

// This exports the reducer function generated by createSlice as the default export.
// The createSlice function returns an object containing the reducer, which is needed to configure the Redux store. The reducer handles the state transitions based on the actions dispatched.
export default hirerDetailsSlice.reducer;
